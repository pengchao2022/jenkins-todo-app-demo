pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        EKS_CLUSTER_NAME = 'todo-app-cluster'
        DOCKER_IMAGE = 'todo-app'
        K8S_NAMESPACE = 'todo-app'
        DOCKER_REGISTRY = '319998871902.dkr.ecr.us-east-1.amazonaws.com'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Verify AWS Setup') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                        echo "ÈÖçÁΩÆ AWS ÁéØÂ¢ÉÂèòÈáè..."
                        export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
                        export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" 
                        export AWS_DEFAULT_REGION=us-east-1
                        
                        echo "ÊµãËØï AWS Âá≠ÊçÆ..."
                        aws sts get-caller-identity
                        echo "‚úÖ AWS Âá≠ÊçÆÂ∑•‰ΩúÊ≠£Â∏∏ÔºÅ"
                    '''
                }
            }
        }
        
        stage('ECR Login') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                        export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
                        export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
                        export AWS_DEFAULT_REGION=us-east-1
                        
                        echo "ÁôªÂΩïÂà∞ ECR..."
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 319998871902.dkr.ecr.us-east-1.amazonaws.com
                        
                        echo "‚úÖ ECR ÁôªÂΩïÊàêÂäüÔºÅ"
                    """
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG} .
                        docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                script {
                    sh """
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                        export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
                        export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
                        export AWS_DEFAULT_REGION=us-east-1
                        
                        # ÈÖçÁΩÆ kubectl
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}
                        
                        # ÂàõÂª∫ÂëΩÂêçÁ©∫Èó¥
                        kubectl apply -f kubernetes/namespace.yaml
                        
                        # ÈÉ®ÁΩ≤ MySQL
                        echo "ÈÉ®ÁΩ≤ MySQL..."
                        kubectl apply -f kubernetes/mysql/ -n ${K8S_NAMESPACE}
                        
                        # Á≠âÂæÖ MySQL Â∞±Áª™
                        echo "Á≠âÂæÖ MySQL ÂêØÂä®..."
                        sleep 60
                        
                        # ÈÉ®ÁΩ≤Â∫îÁî®
                        echo "ÈÉ®ÁΩ≤ Todo App..."
                        kubectl apply -f kubernetes/todo-app/ -n ${K8S_NAMESPACE}
                        
                        # Êõ¥Êñ∞ÈïúÂÉè
                        kubectl set image deployment/todo-app-deployment \\
                            todo-app=${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG} \\
                            -n ${K8S_NAMESPACE}
                        
                        # Á≠âÂæÖÈÉ®ÁΩ≤ÂÆåÊàê
                        kubectl rollout status deployment/todo-app-deployment -n ${K8S_NAMESPACE} --timeout=300s
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh """
                    echo "‚úÖ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ"
                    kubectl get pods -n ${K8S_NAMESPACE}
                    kubectl get services -n ${K8S_NAMESPACE}
                """
            }
        }
    }
    
    post {
        always {
            echo "Pipeline ÊâßË°åÂÆåÊàê"
        }
        success {
            echo "üéâ ÈÉ®ÁΩ≤ÊàêÂäüÔºÅÊûÑÂª∫Âè∑: ${env.BUILD_NUMBER}"
        }
        failure {
            echo "‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•ÔºÅÊûÑÂª∫Âè∑: ${env.BUILD_NUMBER}"
        }
    }
}